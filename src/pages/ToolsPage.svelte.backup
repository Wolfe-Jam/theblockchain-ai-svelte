<!-- Backup of original ToolsPage.svelte before Phase 2 enhancement -->
<!-- src/pages/ToolsPage.svelte -->
<script>
  import { onMount } from 'svelte';
  
  let promptInput = '';
  let generatedCode = '';
  let isGenerating = false;
  let showResult = false;
  
  async function generateContract() {
    if (!promptInput.trim()) return;
    
    isGenerating = true;
    showResult = false;
    
    try {
      // Call your existing Netlify function (you can adapt this to call Gemini directly)
      const response = await fetch('/.netlify/functions/ask-ai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userQuestion: `Generate a Solidity smart contract based on this description: ${promptInput}. 
          Please provide clean, commented Solidity code that implements the described functionality. 
          Include relevant imports and basic security considerations.`
        })
      });
      
      const data = await response.json();
      generatedCode = data.answer || 'Error generating contract. Please try again.';
      showResult = true;
    } catch (error) {
      generatedCode = 'Network error. Please check your connection and try again.';
      showResult = true;
    } finally {
      isGenerating = false;
    }
  }
  
  function copyToClipboard() {
    navigator.clipboard.writeText(generatedCode).then(() => {
      // You could add a toast notification here
      alert('Code copied to clipboard!');
    });
  }
  
  const examplePrompts = [
    "An ERC721 contract where the minting fee is split 90% to the artist and 10% to the platform.",
    "A simple voting contract where users can vote on proposals with a deadline.",
    "An ERC20 token with built-in staking rewards for holders.",
    "A marketplace contract for buying and selling digital assets with escrow."
  ];
  
  function useExamplePrompt(prompt) {
    promptInput = prompt;
  }
</script>

<div class="min-h-screen bg-slate-900 text-white">
  <!-- Hero Section -->
  <div class="relative bg-gradient-to-br from-orange-900 via-slate-800 to-slate-900">
    <div class="absolute inset-0 bg-black/20"></div>
    <div class="relative max-w-4xl mx-auto px-6 py-24">
      <div class="text-center">
        <h1 class="text-5xl font-bold mb-6 text-center">
          <span class="block text-orange-500">
            Code-In-Action:
          </span>
          <span class="block text-orange-400">
            The Smart Contract Generator
          </span>
        </h1>
        <p class="text-xl text-slate-300 max-w-3xl mx-auto leading-relaxed">
          This tool is a practical exhibit of our core philosophy.<br>
          Describe the logic for a protocol in plain English, and our AI assistant will generate the Solidity boilerplate. Your next project starts here.
        </p>
      </div>
    </div>
  </div>

  <!-- Main Tool Interface -->
  <div class="max-w-4xl mx-auto px-6 py-16">
    
    <!-- Input Section -->
    <div class="bg-slate-800 rounded-lg p-8 mb-8">
      <label for="prompt-input" class="block text-lg font-semibold mb-4 text-cyan-400">
        Describe your smart contract logic:
      </label>
      
      <textarea 
        id="prompt-input"
        bind:value={promptInput}
        placeholder="e.g., An ERC721 contract where the minting fee is split 90% to the artist and 10% to the platform."
        class="w-full h-32 bg-slate-700 border border-slate-600 rounded-lg p-4 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-transparent resize-none"
        disabled={isGenerating}
      ></textarea>
      
      <div class="flex items-center justify-between mt-6">
        <button 
          on:click={generateContract}
          disabled={isGenerating || !promptInput.trim()}
          class="bg-orange-500 hover:bg-orange-600 disabled:bg-slate-600 disabled:cursor-not-allowed text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200"
        >
          {#if isGenerating}
            <div class="flex items-center gap-2">
              <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              Generating with AI...
            </div>
          {:else}
            Generate with AI
          {/if}
        </button>
        
        <div class="text-slate-400 text-sm">
          Powered by Gemini AI
        </div>
      </div>
    </div>

    <!-- Example Prompts -->
    <div class="mb-8">
      <h3 class="text-xl font-semibold mb-4 text-white">Try these examples:</h3>
      <div class="grid gap-3">
        {#each examplePrompts as prompt}
          <button 
            on:click={() => useExamplePrompt(prompt)}
            class="text-left bg-slate-700 hover:bg-slate-600 p-4 rounded-lg transition-colors duration-200 text-slate-300 hover:text-white"
          >
            "{prompt}"
          </button>
        {/each}
      </div>
    </div>

    <!-- Generated Code Section -->
    {#if showResult}
      <div class="bg-slate-800 rounded-lg p-8 mb-8">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-xl font-semibold text-cyan-400">Generated Smart Contract</h3>
          <button 
            on:click={copyToClipboard}
            class="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-lg transition-colors duration-200 flex items-center gap-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
            Copy Code
          </button>
        </div>
        
        <div class="bg-slate-900 rounded-lg p-6 overflow-x-auto">
          <pre class="text-green-400 text-sm"><code>{generatedCode}</code></pre>
        </div>
      </div>
    {/if}

    <hr class="border-slate-700 mb-12">

    <!-- What's Next Section -->
    <div class="bg-gradient-to-r from-cyan-900 to-blue-900 rounded-lg p-8">
      <h3 class="text-2xl font-bold mb-6 text-white">What's Next? (3 Simple Steps)</h3>
      <div class="grid md:grid-cols-3 gap-6">
        <div class="bg-slate-800 rounded-lg p-6">
          <div class="flex items-center gap-3 mb-4">
            <div class="w-8 h-8 bg-cyan-400 text-slate-900 rounded-full flex items-center justify-center font-bold">1</div>
            <h4 class="text-lg font-semibold text-cyan-400">Copy Code</h4>
          </div>
          <p class="text-slate-300">Use the button on the generated code block.</p>
        </div>
        
        <div class="bg-slate-800 rounded-lg p-6">
          <div class="flex items-center gap-3 mb-4">
            <div class="w-8 h-8 bg-orange-400 text-slate-900 rounded-full flex items-center justify-center font-bold">2</div>
            <h4 class="text-lg font-semibold text-orange-400">Go to Remix IDE</h4>
          </div>
          <p class="text-slate-300">Paste into the free, web-based IDE.</p>
          <a 
            href="https://remix.ethereum.org" 
            target="_blank" 
            rel="noopener noreferrer"
            class="inline-block mt-3 text-orange-400 hover:text-orange-300 underline"
          >
            Open Remix â†’
          </a>
        </div>
        
        <div class="bg-slate-800 rounded-lg p-6">
          <div class="flex items-center gap-3 mb-4">
            <div class="w-8 h-8 bg-blue-400 text-slate-900 rounded-full flex items-center justify-center font-bold">3</div>
            <h4 class="text-lg font-semibold text-blue-400">Compile & Deploy</h4>
          </div>
          <p class="text-slate-300">Use Remix to deploy to a testnet like Sepolia.</p>
        </div>
      </div>
      
      <div class="mt-8 text-center">
        <a 
          href="/deep-dive/the-convergent-economy" 
          class="inline-block bg-slate-700 hover:bg-slate-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
        >
          Learn More About Our Vision
        </a>
      </div>
    </div>
  </div>
</div>

<style>
  pre {
    font-family: 'Fira Code', 'Courier New', monospace;
    line-height: 1.5;
    white-space: pre-wrap;
    word-wrap: break-word;
  }
  
  code {
    font-family: 'Fira Code', 'Courier New', monospace;
  }
</style>
