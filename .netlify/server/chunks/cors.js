class f{static events=[];static MAX_EVENTS=1e3;static logSecurityEvent(e){const t={...e,timestamp:new Date().toISOString()};this.events.push(t),this.events.length>this.MAX_EVENTS&&(this.events=this.events.slice(-this.MAX_EVENTS));const i=this.getLogLevel(e.type);console[i](`[SECURITY] ${e.type} from ${e.ip} on ${e.endpoint}`,e.details),typeof window>"u"&&process.env.NODE_ENV==="production"&&this.sendToMonitoringService(t).catch(console.error)}static async checkForSuspiciousActivity(e){const t=this.events.filter(i=>i.ip===e&&Date.now()-new Date(i.timestamp).getTime()<3e5);return t.filter(i=>i.type==="auth_failure").length>=5||t.filter(i=>i.type==="rate_limit").length>=3||t.filter(i=>i.type==="invalid_input").length>=10}static getRecentEvents(e=100){return this.events.slice(-e).reverse()}static getSecurityStats(e=36e5){const t=Date.now()-e,i=this.events.filter(s=>new Date(s.timestamp).getTime()>t),o={},r={};i.forEach(s=>{o[s.type]=(o[s.type]||0)+1,r[s.ip]=(r[s.ip]||0)+1});const n=Object.entries(r).sort(([,s],[,c])=>c-s).slice(0,10).map(([s,c])=>({ip:s,count:c}));return{totalEvents:i.length,eventsByType:o,topIPs:n}}static getLogLevel(e){switch(e){case"rate_limit":return"warn";case"auth_failure":case"suspicious_request":return"error";case"invalid_input":case"cors_violation":return"warn";default:return"log"}}static async sendToMonitoringService(e){try{process.env.SECURITY_WEBHOOK_URL&&await fetch(process.env.SECURITY_WEBHOOK_URL,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({service:"theblockchain.ai",environment:process.env.NODE_ENV,event:e})})}catch(t){console.error("Failed to send security event to monitoring service:",t)}}static shouldBlockIP(e){return new Set([]).has(e)}static getProgressivePenalty(e){const t=this.events.filter(i=>i.ip===e&&i.type==="rate_limit"&&Date.now()-new Date(i.timestamp).getTime()<36e5).length;return t>=5?3600:t>=3?900:t>=2?300:t>=1?60:0}}class u{memoryStore=new Map;redisClient;constructor(){this.initializeRedis()}async checkLimit(e,t,i){const o=Date.now(),r=i*1e3,n=o+r;return this.redisClient?this.checkRedisLimit(e,t,i,o):this.checkMemoryLimit(e,t,r,o,n)}async getRemainingRequests(e,t){if(this.redisClient)try{const i=await this.redisClient.get(e);return Math.max(0,t-(i||0))}catch{return t}else{const i=this.memoryStore.get(e);return!i||Date.now()>i.resetTime?t:Math.max(0,t-i.count)}}async clearLimit(e){if(this.redisClient)try{await this.redisClient.del(e)}catch(t){console.error("Redis clear failed:",t)}else this.memoryStore.delete(e)}checkMemoryLimit(e,t,i,o,r){let n=this.memoryStore.get(e);(!n||o>n.resetTime)&&(n={count:0,resetTime:r},this.memoryStore.set(e,n)),n.count++;const s=n.count<=t,c=Math.max(0,t-n.count);return Math.random()<.01&&this.cleanupMemoryStore(),{allowed:s,remaining:c,resetTime:n.resetTime,retryAfter:s?void 0:Math.ceil((n.resetTime-o)/1e3)}}async checkRedisLimit(e,t,i,o){try{const r=this.redisClient.pipeline();r.incr(e),r.expire(e,i);const s=(await r.exec())[0][1],c=s<=t,l=Math.max(0,t-s),h=o+i*1e3;return{allowed:c,remaining:l,resetTime:h,retryAfter:c?void 0:i}}catch(r){return console.error("Redis rate limit error:",r),{allowed:!0,remaining:t,resetTime:o+i*1e3}}}initializeRedis(){try{typeof window>"u"&&process.env.UPSTASH_REDIS_REST_URL&&process.env.UPSTASH_REDIS_REST_TOKEN&&import("@upstash/redis").then(({Redis:e})=>{this.redisClient=new e({url:process.env.UPSTASH_REDIS_REST_URL,token:process.env.UPSTASH_REDIS_REST_TOKEN})}).catch(e=>{console.warn("Redis initialization failed, falling back to memory store:",e),this.redisClient=null})}catch(e){console.warn("Redis not available, using memory store:",e),this.redisClient=null}}cleanupMemoryStore(){const e=Date.now();for(const[t,i]of this.memoryStore.entries())e>i.resetTime&&this.memoryStore.delete(t)}getStats(){return{totalKeys:this.redisClient?-1:this.memoryStore.size,backend:this.redisClient?"redis":"memory"}}}const y=new u,m=process.env.NODE_ENV==="development",p=["https://theblockchain.ai","https://www.theblockchain.ai",...m?["http://localhost:5173","http://localhost:4173","http://127.0.0.1:5173"]:[]];function d(a){return{"Access-Control-Allow-Origin":a&&p.includes(a)?a:"null","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization, X-Requested-With","Access-Control-Allow-Credentials":"false","Access-Control-Max-Age":"86400","X-Content-Type-Options":"nosniff","X-Frame-Options":"DENY","X-XSS-Protection":"1; mode=block","Referrer-Policy":"strict-origin-when-cross-origin"}}function S(a){return new Response(null,{status:204,headers:d(a)})}export{f as S,S as c,d as g,y as r};
